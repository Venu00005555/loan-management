import sys
from typing import Any, Callable, List, Optional


class Pep562:
    """PEP 562 emulation for Python versions below 3.7."""

    def __init__(self, module_name: str) -> None:
        """Initialize by capturing the module and its optional hooks."""
        module = sys.modules[module_name]
        self._module = module
        self._getattr_func: Optional[Callable[[str], Any]] = getattr(module, "__getattr__", None)
        self._dir_func: Optional[Callable[[], List[str]]] = getattr(module, "__dir__", None)
        sys.modules[module_name] = self  # Replace module with proxy

    def __dir__(self) -> List[str]:
        """Use the moduleâ€™s custom __dir__ if it exists; otherwise, return standard dir()."""
        return self._dir_func() if self._dir_func else dir(self._module)

    def __getattr__(self, name: str) -> Any:
        """Retrieve an attribute from the module or its custom __getattr__ if defined."""
        try:
            return getattr(self._module, name)
        except AttributeError:
            if self._getattr_func:
                return self._getattr_func(name)
            raise


def pep562(module_name: str) -> None:
    """Apply PEP 562 support for Python < 3.7."""
    if sys.version_info < (3, 7):
        Pep562(module_name)
