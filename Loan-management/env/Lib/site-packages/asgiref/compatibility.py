import asyncio
import inspect
import sys


def is_double_callable(app):
    """
    Determine if an ASGI application is legacy-style (double-callable).
    """
    # Check for compatibility flags
    if getattr(app, "_asgi_single_callable", False):
        return False
    if getattr(app, "_asgi_double_callable", False):
        return True

    # Uninstantiated classes are double-callable
    if inspect.isclass(app):
        return True

    # For instances, check the __call__ method
    if hasattr(app, "__call__"):
        if asyncio.iscoroutinefunction(app.__call__):
            return False

    # For other callables, check directly
    return not asyncio.iscoroutinefunction(app)


def wrap_double_callable(app):
    """
    Convert a double-callable ASGI application into a single-callable one.
    """

    async def single_callable(scope, receive, send):
        instance = app(scope)
        return await instance(receive, send)

    return single_callable


def ensure_single_callable(app):
    """
    Ensure an ASGI app is single-callable, converting older style if necessary.
    Useful for backward compatibility with ASGI 2.0 applications.
    """
    return wrap_double_callable(app) if is_double_callable(app) else app


# Handle version-specific asyncio compatibility
if sys.version_info >= (3, 7):
    get_running_loop = asyncio.get_running_loop
    run_future = asyncio.run
    create_task = asyncio.create_task
else:
    get_running_loop = asyncio.get_event_loop
    run_future = asyncio.ensure_future
    create_task = lambda task: task  # No-op fallback for Python < 3.7
